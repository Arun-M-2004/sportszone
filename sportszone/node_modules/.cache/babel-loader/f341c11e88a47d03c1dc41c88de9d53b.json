{"ast":null,"code":"import { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\nclass WillChangeMotionValue extends MotionValue {\n  constructor() {\n    super(...arguments);\n    this.output = [];\n    this.counts = new Map();\n  }\n  add(name) {\n    const styleName = getWillChangeName(name);\n    if (!styleName) return;\n    /**\n     * Update counter. Each value has an indepdent counter\n     * as multiple sources could be requesting the same value\n     * gets added to will-change.\n     */\n    const prevCount = this.counts.get(styleName) || 0;\n    this.counts.set(styleName, prevCount + 1);\n    if (prevCount === 0) {\n      this.output.push(styleName);\n      this.update();\n    }\n    /**\n     * Prevents the remove function from being called multiple times.\n     */\n    let hasRemoved = false;\n    return () => {\n      if (hasRemoved) return;\n      hasRemoved = true;\n      const newCount = this.counts.get(styleName) - 1;\n      this.counts.set(styleName, newCount);\n      if (newCount === 0) {\n        removeItem(this.output, styleName);\n        this.update();\n      }\n    };\n  }\n  update() {\n    this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n  }\n}\nexport { WillChangeMotionValue };","map":null,"metadata":{},"sourceType":"module"}